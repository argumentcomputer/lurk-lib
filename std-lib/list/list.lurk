;; a list is of the form (cons a (cons b (cons ... (cons nil)...)))
;; some definitions for lists 

;; empty-list : the empty list
(let ((empty-list '())) (current-env))

;; some functions for lists 

;; list : make a list out of a (possibly unevaluated) list quote
(letrec ((list (lambda (q)
		 (if (car q)
		     (cons (eval (car q)) (list (cdr q)))
		     '()))))
  (current-env))

;; list-eq : determine if two lists are equal
(letrec ((list-eq (lambda (l1 l2)
    (if (car l1) 
        (if (car l2)
            (if (= (car l1) (car l2))
                (list-eq (cdr l1) (cdr l2))
                nil)
            nil)
        (if (car l2)
            nil
            t)))))
    (current-env))

;; snoc : appends to the right-hand side of a list (opposite of cons)
(letrec 
    ((snoc-iter (lambda (old-list new-list) 
        (if (car old-list)
            (snoc-iter (cdr old-list) (cons (car old-list) new-list))
            new-list)))
    (snoc (lambda (x lst) (snoc-iter (snoc-iter lst '()) (cons x nil))))) 
    (current-env))

;; list-length : determines the length of a list 
(letrec 
    ((length-iter (lambda (lst cntr)
        (if (car lst)
            (length-iter (cdr lst) (+ 1 cntr))
            cntr)))
    (list-length (lambda (lst) (length-iter lst 0))))
    (current-env))

;; list-map : a list map function 
(letrec 
    ((map-iter (lambda (lst fun accum)
        (if (car lst)
            (map-iter (cdr lst) fun (snoc (fun (car lst)) accum))
            accum)))
    (list-map (lambda (lst fun) (map-iter lst fun (cons nil nil)))))
    (current-env))

;; list-fold : a fold function over lists 
(letrec 
    ((list-fold (lambda (lst op accum)
        (if (car lst)
            (list-fold (cdr lst) op (op (car lst) accum))
            accum))))
    (current-env))
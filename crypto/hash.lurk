;; hash.lurk
;; 
;; DESCRIPTION
;; simplistic poseidon-like hash
;; not cryptographically safe
;;
;;
;; USAGE EXAMPLES
;; to hash 1 element:
;; (hash1 x)
;; > (hash1 42)
;; [1966 iterations] => 0x06c36a414ab6a0daecd1cb514e456388cc4c696c10c1287e4c2920b0ec2ee575
;;
;; to hash 2 elements (as in a binary tree):
;; > (hash2 0 9)
;; [3945 iterations] => 0x35011ae2a69d5e5240fe364c36e25115e8a9fdc3f358b4f2a2508f62b4a4768b
;;
;; to hash a list of elements:
;; > (hashn '(10 9 8 7 6 5 4 3 2 1 0))
;; [22103 iterations] => 0x0840954493b061017a29779ddc1f01d7c3cff8c1fd8ef5f9c5baee6884cc712b
;;


(letrec ((exp (lambda (b e)
                (if (= 0 e) 1 (* b (exp b (- e 1))))))
         (mds1 (lambda (a b) (+ (* a 3) (* b 5))))
         (mds2 (lambda (a b) (+ (* a 7) (* b 9))))
         (sbox (lambda (a) (exp a 5)))
         (add1 (lambda (a) (+ a 123)))
         (add2 (lambda (a) (+ a 321)))
         (rnd (lambda (a b) (cons
                             (add1 (sbox (mds1 a b)))
                             (add2 (sbox (mds2 a b)))
                             )))
         (nbrounds 4)
         (perm (lambda (a b)
                 (letrec ( (iter (lambda (i a b)
                                   (if (= i nbrounds)
                                       (cons a b)
                                       (let (
                                             (res (rnd a b))
                                             (a (car res))
                                             (b (cdr res))
                                             )
                                         (iter (+ i 1) a b))
                                       ))))
                   (iter 0 a b))))
         (iv (- 0 1))
         (hash1 (lambda (a) (car (perm a iv))))
         (hash2 (lambda (a b) (let (
                                    (res1 (perm a iv))
                                    (res2 (perm (+ b (car res1)) (cdr res1)))
                                    )
                                (car res2))))
         (hash3 (lambda (a b c) (let (
                                      (res1 (perm a iv))
                                      (res2 (perm (+ b (car res1)) (cdr res1)))
                                      (res3 (perm (+ c (car res2)) (cdr res2)))
                                      )
                                  (car res3))))
         (hashn (lambda (l) (if (eq l nil)
                                nil
                                (let ((res0 (perm (car l) iv)))
                                  (letrec ((iter (lambda (ll a b) 
                                                   (if (eq ll nil) a
                                                       (let ((res (perm (+ (car ll) a) b)))
                                                         (iter (cdr ll) (car res) (cdr res)))))))
                                    (iter (cdr l) (car res0) (cdr res0))))))))
  (current-env))

